{"./":{"url":"./","title":"序言","keywords":"","body":"序言 这是一本关于集合git、github、gitlab、gitbook的书。 Copyright © ghostwritten 2019 all right reserved，powered by Gitbook该文件修订时间： 2022-05-31 08:43:22 "},"Git/1_git_introduce.html":{"url":"Git/1_git_introduce.html","title":"git 介绍","keywords":"","body":"git 介绍 简介 Git 是一个免费和开源的 分布式版本控制系统，旨在以速度和效率处理从小型到大型项目的所有内容。 Git易于学习， 占用空间小，性能快如闪电。它优于 SCM 工具，如 Subversion、CVS、Perforce 和 ClearCase，具有廉价的本地分支、方便的暂存区域和 多个工作流等功能。 git功能 从一般开发者的角度来看，git有以下功能： 从服务器上克隆数据库（包括代码和版本信息）到单机上。 在自己的机器上创建分支，修改代码。 在单机上自己创建的分支上提交代码。 在单机上合并分支。 新建一个分支，把服务器上最新版的代码fetch下来，然后跟自己的主分支合并。 生成补丁（patch），把补丁发送给主开发者。 看主开发者的反馈，如果主开发者发现两个一般开发者之间有冲突（他们之间可以合作解决的冲 突），就会要求他们先解决冲突，然后再由其中一个人提交。如果主开发者可以自己解决，或者 没有冲突，就通过。 一般开发者之间解决冲突的方法，开发者之间可以使用pull 命令解决冲突，解决完冲突之后再 向主开发者提交补丁。 从主开发者的角度（假设主开发者不用开发代码）看，git有以下功能： 查看邮件或者通过其它方式查看一般开发者的提交状态。 打上补丁，解决冲突（可以自己解决，也可以要求开发者之间解决以后再重新提交，如果是开源 项目，还要决定哪些补丁有用，哪些不用）。 向公共服务器提交结果，然后通知所有开发人员。 git入门 如果是第一次使用Git，你需要设置署名和邮箱： $ git config --global user.name \"用户名\" $ git config --global user.email \"电子邮箱\" 将代码仓库clone到本地，其实就是将代码复制到你的机器里，并交由Git来管理： $ git clone git@github.com:someone/symfony-docs-chs.git 你可以修改复制到本地的代码了（symfony-docs-chs项目里都是rst格式的文档）。当你觉得完成 了一定的工作量，想做个阶段性的提交： 向这个本地的代码仓库添加当前目录的所有改动： $ git add . 或者只是添加某个文件： $ git add -p 我们可以输入 $git status # 位于分支 main # 要提交的变更： # （使用 \"git reset HEAD ...\" 撤出暂存区） # # 新文件： descriptor.sh # 可以看到状态的变化是从黄色到绿色，即unstage到add。 Copyright © ghostwritten 2019 all right reserved，powered by Gitbook该文件修订时间： 2022-05-31 14:53:47 "},"Github/3_github_action.html":{"url":"Github/3_github_action.html","title":"github action 快速入门","keywords":"","body":"Github Action 快速入门 参考链接： https://jamesiv.es/ https://github.com/JamesIves https://github.com/JamesIves/github-pages-deploy-action https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html 1. 简介 GitHub Actions 是 GitHub 的持续集成服务，于2018年10月推出。 GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 工作流程是您添加到仓库的自动化过程。 工作流程由一项或多项作业组成，可以计划或由事件触发。 工作流程可用于在 GitHub 上构建、测试、打包、发布或部署项目。 GitHub 官方市场，我们除了自己编写action，也可以借用别人的。 每个 action 就是一个独立脚本，因此可以做成代码仓库，使用userName/repoName的语法引用 action。比如，actions/setup-node就表示github.com/actions/setup-node这个仓库，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 github.com/actions 里面。 actions 也有版本的概念，下面都是合法的 action 引用，用的就是 Git 的指针概念，详见官方文档。 actions/setup-node@74bc508 # 指向一个 commit actions/setup-node@v1.0 # 指向一个标签 actions/setup-node@master # 指向一个分支 2. 基础概念 workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。 job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务； step（步骤）：每个 job 由多个 step 构成，一步步完成。 action （动作）：每个 step 可以依次执行一个或多个命令（action）。 GitHub Ac­tions 为每个任务 (job) 都提供了一个虚拟机来执行，每台虚拟机都有相同的硬件资源： 2-core CPU 7 GB RAM 内存 14 GB SSD 硬盘空间 使用限制： 每个仓库只能同时支持20个 workflow 并行。 每小时可以调用1000次 GitHub API 。 每个 job 最多可以执行6个小时。 免费版的用户最大支持20个 job 并发执行，macOS 最大只支持5个。 私有仓库每月累计使用时间为2000分钟，超过后$ 0.008/分钟，公共仓库则无限制。 操作系统方面可选择 Win­dows server、Linux、ma­cOS，并预装了大量软件包和工具。 虽然名称叫持续集成，但当所有任务终止和完成时，虚拟环境内的数据会随之清空，并不会持续。即每个新任务都是一个全新的虚拟环境。 3. workflow 文件 GitHub Ac­tions 的配置文件叫做 work­flow 文件（官方中文翻译为 “工作流程文件”），存放在代码仓库的.github/workflows 目录中。work­flow 文件采用 YAML 格式，文件名可以任意取，但是后缀名统一为.yml，比如 p3terx.yml。一个库可以有多个 work­flow 文件，GitHub 只要发现.github/workflows 目录里面有.yml 文件，就会按照文件中所指定的触发条件在符合条件时自动运行该文件中的工作流程。在 Ac­tions 页面可以看到很多种语言的 work­flow 文件的模版，可以用于简单的构建与测试。 workflow 文件的配置字段非常多，详见官方文档。下面是一些基本字段。 #name字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。 name: GitHub Actions Demo 3.1 触发事件 #push事件触发 workflow。 on: push #on字段也可以是事件的数组。`push`事件或`pull_request`事件都可以触发 `workflow`。 on: [push, pull_request] #只有`master`分支发生`push`事件时，才会触发 workflow on: push: branches: - master #push tag 时触发 on: push: tags: - 'v*' #发布 re­lease 触发 on: release: types: [published] 定时触发 on: schedule: - cron: '0 * * * *' 3.2 job任务 workflow 文件的主体是jobs字段，表示要执行的一项或多项任务。 jobs字段里面，需要写出每一项任务的job_id，具体名称自定义。job_id里面的name字段是任务的说明。 #job_id分别是my_first_job和my_second_job jobs: my_first_job: name: My first job my_second_job: name: My second job #`needs`字段指定当前任务的依赖关系，即运行顺序。`job1`必须先于job2完成，而job3等待`job1`和`job2`的完成才能运行 #因此，这个 workflow 的运行顺序依次为：`job1、job2、job3`。 jobs: job1: job2: needs: job1 job3: needs: [job1, job2] 3.3 运行主机环境 runs-on字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。 ubuntu-latest，ubuntu-18.04或ubuntu-16.04 windows-latest，windows-2019或windows-2016 macOS-latest或macOS-10.14 runs-on: ubuntu-18.04 3.4 运行步骤 #`steps`字段指定每个 `Job` 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。 jobs..steps.name：步骤名称。 jobs..steps.run：该步骤运行的命令或者 action。 jobs..steps.env：该步骤所需的环境变量。 steps: - uses: actions/setup-node@74bc508 # Reference a specific commit - uses: actions/setup-node@v1 # Reference the major version of a release - uses: actions/setup-node@v1.2 # Reference a minor version of a release - uses: actions/setup-node@master # Reference a branch 示例： jobs: build: # Job name is Greeting name: Greeting # This job runs on Linux runs-on: ubuntu-latest steps: # This step uses GitHub's hello-world-javascript-action: https://github.com/actions/hello-world-javascript-action - name: Hello world uses: actions/hello-world-javascript-action@v1 with: who-to-greet: 'Mona the Octocat' id: hello # This step prints an output (time) from the previous step's action. - name: Echo the greeting's time run: echo 'The time was ${{ steps.hello.outputs.time }}.' 3.5 引用action #public repo {owner}/{repo}@{ref} or {owner}/{repo}/{path}@{ref}. #same repo {owner}/{repo}@{ref} or ./path/to/dir |-- hello-world (repository) | |__ .github | └── workflows | └── my-first-workflow.yml | └── actions | |__ hello-world-action | └── action.yml jobs: build: runs-on: ubuntu-latest steps: # This step checks out a copy of your repository. - uses: actions/checkout@v1 # This step references the directory that contains the action. - uses: ../github/actions/hello-world-action #docker container docker://{image}:{tag} 示例： jobs: my_first_job: steps: - name: My first step uses: docker://gcr.io/cloud-builders/gradle - name: Install Dependencies run: npm install shell: bash 3.6 显示workflow status ![](https://github.com/actions/hello-world/workflows/Greet Everyone/badge.svg) 3.7 with传参 firstname ,会被转化为INPUTFIRST_NAME使用 jobs: my_first_job: steps: - name: My first step uses: actions/hello_world@master with: first_name: Mona middle_name: The last_name: Octocat 3.8 env环境变量 steps: - name: Hello world run: echo Hello world $FIRST_NAME $middle_name $Last_Name! env: FIRST_NAME: Mona middle_name: The Last_Name: Octocat 3.9 secrets引用 steps: - name: My first action env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} FIRST_NAME: Mona LAST_NAME: Octocat steps: - name: Hello world action with: # Set the secret as an input super_secret: ${{ secrets.SuperSecret }} env: # Or as an environment variable super_secret: ${{ secrets.SuperSecret }} 3.10 action/checkout检查 https://github.com/actions/checkout 最新版本特性： 提高性能 默认情况下只获取一个提交 脚本验证的 git 命令 身份验证令牌保留在本地 git 配置中 支持SSH 创建本地分支 检出分支时不再分离 HEAD 改进的布局 输入path总是相对于 $GITHUB_WORKSPACE 与容器操作更好地对齐，其中 $GITHUB_WORKSPACE 被映射到 回退到 REST API 下载 当 PATH 中没有 Git 2.18 或更高版本时，将使用 REST API 下载文件 使用作业容器时，使用容器的 PATH 4. 获取token 根据GitHub提供的文档生成密钥，生成好后记得复制下来，要不然再访问页面的时候密钥就不展示了。 # 生成密钥时主要需要开启的权限有 1、rope 下所有权限 2、admin:repo_hook 下所有权限 3、delete_repo 下所有权限 # 主要是关于rope的权限，尽量都开启 要使用Actions功能的仓库的Settings中的Secrets中新增一条 Name为:ACCESS_TOKEN Value为:刚才生成好的密钥 5. 示例 5.1 一条命令的action 下面是一个完整的 workflow 文件的范例。 name: Greeting from Mona on: push jobs: my-job: name: My Job runs-on: ubuntu-latest steps: - name: Print a greeting env: MY_VAR: Hi there! My name is FIRST_NAME: Mona MIDDLE_NAME: The LAST_NAME: Octocat run: | echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME. 示例文件运行截图： 5.2 React 项目发布到 GitHub Pages 下面是一个实例，通过 GitHub Actions 构建一个 React 项目，并发布到 GitHub Pages。最终代码都在这个仓库里面，发布后的参考网址为ghostwritten.github.io/github-actions-demo 第一步：这个示例需要将构建成果发到 GitHub 仓库，因此需要 GitHub 密钥。按照官方文档，生成一个密钥。然后，将这个密钥储存到当前仓库的Settings/Secrets里面。 上图是储存秘密的环境变量的地方。环境变量的名字可以随便起，这里用的是ACCESS_TOKEN。如果你不用这个名字，后面脚本里的变量名也要跟着改。 第二步：本地计算机使用create-react-app，生成一个标准的 React 应用。 $ npx create-react-app github-actions-demo $ cd github-actions-demo 然后，打开package.json文件，加一个homepage字段，表示该应用发布后的根目录（参见官方文档）。 \"homepage\": \"https://[username].github.io/github-actions-demo\", 上面代码中，将[username]替换成你的 GitHub 用户名，参见范例。 第三步，在这个仓库的.github/workflows目录，生成一个 workflow 文件，名字可以随便取，这个示例是ci.yml。 别人的 action：JamesIves/github-pages-deploy-action name: Build and Deploy on: push: branches: - master jobs: build-and-deploy: runs-on: ubuntu-latest steps: - name: Checkout ������️ uses: actions/checkout@v1 - name: Build and Deploy uses: JamesIves/github-pages-deploy-action@releases/v2 env: ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }} ## GitHub 密钥 ACCESS_TOKEN 是在第二步Settings的Secrets中新增时定义的Name,要保持一致 BASE_BRANCH: master # The branch the action should deploy from. BRANCH: gh-pages # The branch the action should deploy to. FOLDER: build # The folder the action should deploy. BUILD_SCRIPT: npm install && npm run-script build # The build script the action should run prior to deploying. 上面这个 workflow 文件的要点如下。 整个流程在master分支发生push事件时触发。 只有一个job，运行在虚拟机环境ubuntu-latest。 第一步是获取源码，使用的 action 是actions/checkout。 第二步是构建和部署，使用的 action 是JamesIves/github-pages-deploy-action。 第二步需要四个环境变量，分别为 GitHub 密钥、发布分支、构建成果所在目录、构建脚本。其中，只有 GitHub密钥是秘密变量，需要写在双括号里面，其他三个都可以直接写在文件里。 第五步，保存上面的文件后，将整个仓库推送到 GitHub。GitHub 发现了 workflow 文件以后，就会自动运行。你可以在网站上实时查看运行日志，日志默认保存30天。 等到 workflow 运行结束，访问 GitHub Page，即https://ghostwritten.github.io/github-actions-demo，会看到构建成果已经发上网了。如果你想知道如何利用github搭建一个博客，请参考。因为我的博客域名为smoothies.com.cn，当访问ghostwritten.github.io会自动跳转smoothies.com.cn。 以后，每次修改后推送源码，GitHub Actions 都会自动运行，将构建产物发布到网页。 Copyright © ghostwritten 2019 all right reserved，powered by Gitbook该文件修订时间： 2022-05-31 15:21:48 "},"Github/1_github_introduce.html":{"url":"Github/1_github_introduce.html","title":"github 介绍","keywords":"","body":"github 介绍 github是什么 GitHub 是一个共享虚拟主机服务，用于存放使用Git版本控制的软件代码和内容项目。它由GitHub公司（曾称Logical Awesome）的开发者Chris Wanstrath、PJ Hyett和Tom Preston-Werner使用Ruby on Rails编写而成。 它还是什么? 网站 免费博客 管理配置文件 收集资料 简历 管理代码片段 托管编程环境 写作 版本管理与软件部署 GitHub与Git关系 Git是一个分布式的版本控制系统，最初由Linus Torvalds编写，用作Linux内核代码的管理。在推出后，Git在其它项目中也取 得了很大成功，尤其是在Ruby社区中。目前，包括Rubinius、Merb和Bitcoin在内的很多知名项目都使用了Git。Git同样可以被 诸如Capistrano和Vlad the Deployer这样的部署工具所使用。 GitHub可以托管各种git库，并提供一个web界面，但与其它像 SourceForge或Google Code这样的服务不同，GitHub的独特卖 点在于从另外一个项目进行分支的简易性。为一个项目贡献代码非常简单：首先点击项目站点的“fork”的按钮，然后将代码检出并将 修改加入到刚才分出的代码库中，最后通过内建的“pull request”机制向项目负责人申请代码合并。已经有人将GitHub称为代码 玩家的MySpace。 github创建项目 git本地项目上传github或gitlab详解 如何用好 GitHub 如何用好 GitHub，并实践一些敏捷软件开发是一个很有意思的事情.我们可以在上面做很多事情,从测试到CI,再到自动部署. 敏捷软件开发 瀑布流是怎样的？ 一个项目的组成： 代码 CI 测试 自动化测试 文档 版本管理 自动部署 代码模块化 自动化测试 代码质量与重构 git提交规范 工作写法 格式 [任务卡号] xx & xx: do something 比如： [PHODAL-0001] ladohp & phodal: update documents ，解释如下： PHODAL-0001 ，业务的任务卡号，它可以帮我们找到某个业务修改的原因，即点出相应 bug 的来源 ladohp & phodal ，结对编程的两个人的名字，后者（phodal）一般是写代码的人，出于礼貌就放在后面了。由于 Git的提交人只显示一个，所以写上两个的名字。当提交的人不在时，就可以问另外一个人修改的原因。 update documents ，我们做了什么事情 缺点：而对于采用看板的团队来说，并不存在任务卡号这种东西，因此就需要一种额外的作法。 常规写法 格式 [任务分类] 主要修改组件（可选）：修改内容 示例 1， [T] tabs: add icons 。其中的 T 表示这是一个技术卡， tabs 表示修改的是Tabs， add icons 则表示添加了图标。 示例 2， [SkillTree] detail: add link data 。其中的 SkillTree 表示修改的是技能树 Tab 下的内容， detail 则表示修改的是详情页， add link data 则表示是添加了技能的数据 这样做的主要原因是，它可以轻松也帮我 filter 出相应业务的内容。 缺点：要这样做需要团队达到一致，因此付出一些额外的成本。 开源应用、开源库写法 与我们日常工作稍有不同的是：工作中的 Release 计划一般都是事先安排好的，不需要一些CHANGELOG 什么的。而开源应用、开源库需要有对应的 CHANELOG，则添加了什么功能、修改了什么等等。毕竟有很多东西是由社区来维护的。 诸如： docs(changelog): update change log to beta.5 中： docs 则对应修改的类型 changelog 则是影响的范围 subject 则是对应做的事件 对应的类型有： build: 影响构建系统或外部依赖关系的更改（示例范围：gulp，broccoli，npm） ci: 更改我们的持续集成文件和脚本（示例范围：Travis，Circle，BrowserStack，SauceLabs） docs: 仅文档更改 feat: 一个新功能 fix: 修复错误 perf: 改进性能的代码更改 refactor: 代码更改，既不修复错误也不添加功能 style: 不影响代码含义的变化（空白，格式化，缺少分号等） test: 添加缺失测试或更正现有测试 Copyright © ghostwritten 2019 all right reserved，powered by Gitbook该文件修订时间： 2022-05-31 12:11:58 "},"Github/4_github_page.html":{"url":"Github/4_github_page.html","title":"github 定制主页","keywords":"","body":"github 定制主页 效果图： 第一步：创建一个与账号同名的仓库，我的是Ghostwritten 第二步：提出展示需求 需求： 一个问候语 导入一个风格图片 统计一个信以为真的访问量 展示你的活跃度 介绍一下自己 传递你的博客与公众号 你的工作平台、技能与工具是什么 你的擅长语言对比 你日常关注的大佬 .................... 第三步：编写代码，README.md编写 工具： 牌子渲染服务：https://shields.io/ shields用法 github概要奖牌：https://github.com/ryo-ma/github-profile-trophy 丰富案例（包含各种有趣的展示）：https://github.com/abhisheknaiidu/awesome-github-profile-readme 美化教学 代码示例 Copyright © ghostwritten 2019 all right reserved，powered by Gitbook该文件修订时间： 2022-05-31 12:41:48 "},"Gitbook/2_gitbook-plugin-summary.html":{"url":"Gitbook/2_gitbook-plugin-summary.html","title":"gitbook 插件 summary","keywords":"","body":"gitbook 插件 summary Gitbook 插件：自动生成 summary.md 文件内容，如果有很多md文件，这个插件可以帮助你生成初始版本。 $ npm init This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See `npm help init` for definitive documentation on these fields and exactly what they do. Use `npm install ` afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. package name: (git-in-action) version: (1.0.0) description: This is a book about git、github、gitlab and gitbook. entry point: (index.js) test command: git repository: keywords: author: license: (ISC) About to write to /root/github/git-in-action/package.json: { \"name\": \"git-in-action\", \"version\": \"1.0.0\", \"description\": \"This is a book about git、github、gitlab and gitbook.\", \"main\": \"index.js\", \"dependencies\": { \"gitbook-plugin-summary\": \"^1.1.0\", \"gitbook-plugin-theme-comscore\": \"^0.0.3\" }, \"devDependencies\": {}, \"scripts\": { \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\" }, \"author\": \"\", \"license\": \"ISC\" } Is this OK? (yes) yes 安装 gitbook-plugin-summary $ npm install gitbook-plugin-summary $ npm install -g gitbook-summary $ book sm $ cat SUMMARY.md # GitBook Handbook - Git * [1 Git Introduce](git/1_git_introduce.md) * [2 Git Command](git/2_git_command.md) * [3 Git Reset](git/3_git_reset.md) * [4 Git Ssh Login Without Secret](git/4_git_ssh_login_without_secret.md) - Github * [1 Github Introduce](github/1_github_introduce.md) * [2 Github Local Pull Github](github/2_github_local_pull_github.md) * [3 Github Action](github/3_github_action.md) * [4 Github Page](github/4_github_page.md) - Gitlab * [1 Gitlab Deploy](gitlab/1_gitlab_deploy.md) * [2 Gitlab Runner Deploy](gitlab/2_gitlab_runner_deploy.md) * [3 Gitlab Config](gitlab/3_gitlab_config.md) * [4 Gitlab Pipline](gitlab/4_gitlab_pipline.md) * [5 Gitlab Ci Config](gitlab/5_gitlab_ci_config.md) * [Information](information.md) 注意：如果没有命令book，执行 ln -s /usr/local/node-v10.24.0-linux-x64/bin/book /usr/local/bin/ Copyright © ghostwritten 2019 all right reserved，powered by Gitbook该文件修订时间： 2022-05-31 12:10:15 "},"Gitbook/3_github_pages_gitbook.html":{"url":"Gitbook/3_github_pages_gitbook.html","title":"gitbook 发布 github pages","keywords":"","body":"gitbook 发布 github pages 1. github 创建仓库 例如：git-handbook 2. 本地创建github仓库 2.1 linux 仓库名：git-handbook 初始化配置操作，推送github pages $ mkdir git-handbook $ cd git-handbook $ gitbook init $ gitbook build $ ls _book/ gitbook index.html search_index.json $ ls _book README.md SUMMARY.md $ git init $ echo \"*~\" > .gitignore $ echo \"_book\" >> .gitignore $ cp -r _book/* . $ ls _book gitbook index.html README.md search_index.json SUMMARY.md $ git add --all $ git commit -m \"Publish book\" $ git remote add origin https://github.com/Ghostwritten/git-handbook.git $ git push -u origin master Username for 'https://github.com': ghostwritten Password for 'https://ghostwritten@github.com': 3. 配置 github pages 3.1 新建分支 git checkout --orphan gh-pages 3.2 删除不需要的文件 切换到pages分支后，我们需要将_books目录之外的文件都清理掉： git rm --cached -r . git clean -df rm -rf *~ 3.3 添加忽略文件 使用文本编辑器，创建名为.gitignore的文件，内容如下： *~ _book .DS_Store 通过.gitignore文件，本地仓库将忽略临时文件和_book文件夹。 3.4 复制_book文件夹到分支根目录 cp -r _book/* . 3.5 推送 git add . git commit -m '更新说明' git push -u origin gh-pages master与gh-pages的不同之处： 3.6 验证 如果没有自定义的域名，你访问的方式地址为：http://.github.io/git-handbook 这里我配置了自己的域名，ghostwritten*.github.io* 重定向到了个人站点 smoothies.com.cn 4. 推送至gitbook仓库 注册gitbook 与仓库同名 Copyright © ghostwritten 2019 all right reserved，powered by Gitbook该文件修订时间： 2022-05-31 12:42:52 "},"Gitbook/1_gitbook_start.html":{"url":"Gitbook/1_gitbook_start.html","title":"gitbook 快速入门","keywords":"","body":"Gitbook 快速入门 1. 介绍 Gitbook 是一款优秀的 基于 Node.js 的开源文档管理工具，具有丰富的开源插件。 GitBook 支持 Markdown 和 AsciiDoc 两种语法格式，能够输出 html，pdf，epub，mobi 等多种格式。 2. 条件 nodejs 安装 node一定要安装10.X版本，否则报如下错误： CLI version: 2.3.2 Installing GitBook 3.2.3 /usr/local/node/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js:287 if (cb) cb.apply(this, arguments) ^ TypeError: cb.apply is not a function at /usr/local/node/lib/node_modules/gitbook-cli/node_modules/npm/node_modules/graceful-fs/polyfills.js:287:18 at FSReqCallback.oncomplete (fs.js:193:5) 系统：ubuntu：18.04 3. 安装 gitbook工具 $ npm install gitbook-cli -g /usr/local/node/bin/gitbook -> /usr/local/node/lib/node_modules/gitbook-cli/bin/gitbook.js + gitbook-cli@2.3.2 added 578 packages from 672 contributors in 191.662s #找到gitbook命令位置 $ ls /usr/local/node-v10.24.0-linux-x64/bin/ gitbook node node_modules/ npm npx package-lock.json #添加软连接 $ ln -s /usr/local/node-v17.4.0-linux-x64/bin/gitbook /usr/local/bin/ $ gitbook -V CLI version: 2.3.2 Installing GitBook 3.2.3 gitbook@3.2.3 ../../../../tmp/tmp-117466TKiRhUq3ov0O/node_modules/gitbook ├── escape-html@1.0.3 ├── escape-string-regexp@1.0.5 ├── destroy@1.0.4 ├── ignore@3.1.2 ├── bash-color@0.0.4 ├── gitbook-plugin-livereload@0.0.1 ├── cp@0.2.0 ├── nunjucks-do@1.0.0 ├── graceful-fs@4.1.4 ├── github-slugid@1.0.1 ├── direction@0.1.5 ├── q@1.4.1 ├── spawn-cmd@0.0.2 ├── gitbook-plugin-fontsettings@2.0.0 ├── open@0.0.5 ├── is@3.3.0 ├── object-path@0.9.2 ├── extend@3.0.2 ├── json-schema-defaults@0.1.1 ├── gitbook-plugin-search@2.2.1 ├── jsonschema@1.1.0 ├── crc@3.4.0 ├── urijs@1.18.0 ├── semver@5.1.0 ├── immutable@3.8.2 ├── front-matter@2.3.0 ├── npmi@2.0.1 (semver@4.3.6) ├── resolve@1.1.7 ├── gitbook-plugin-theme-default@1.0.7 ├── moment@2.13.0 ├── npm@3.9.2 ├── dom-serializer@0.1.0 (domelementtype@1.1.3, entities@1.1.2) ├── tmp@0.0.28 (os-tmpdir@1.0.2) ├── error@7.0.2 (xtend@4.0.2, string-template@0.2.1) ├── omit-keys@0.1.0 (isobject@0.2.0, array-difference@0.0.1) ├── mkdirp@0.5.1 (minimist@0.0.8) ├── js-yaml@3.14.1 (esprima@4.0.1, argparse@1.0.10) ├── gitbook-plugin-lunr@1.2.0 (html-entities@1.2.0, lunr@0.5.12) ├── gitbook-plugin-highlight@2.0.2 (highlight.js@9.2.0) ├── gitbook-plugin-sharing@1.0.2 (lodash@3.10.1) ├── i18n-t@1.0.1 (lodash@4.17.21) ├── gitbook-markdown@1.3.2 (kramed-text-renderer@0.2.1, gitbook-html@1.3.3, kramed@0.5.6, lodash@4.17.21) ├── gitbook-asciidoc@1.2.2 (gitbook-html@1.3.3, asciidoctor.js@1.5.5-1, lodash@4.17.21) ├── send@0.13.2 (fresh@0.3.0, etag@1.7.0, statuses@1.2.1, range-parser@1.0.3, ms@0.7.1, depd@1.1.2, mime@1.3.4, debug@2.2.0, http-errors@1.3.1, on-finished@2.3.0) ├── fresh-require@1.0.3 (is-require@0.0.1, shallow-copy@0.0.1, astw@1.3.0, acorn@0.9.0, sleuth@0.1.1, escodegen@1.14.3, through2@0.6.5) ├── rmdir@1.2.0 (node.flow@1.2.3) ├── request@2.72.0 (tunnel-agent@0.4.3, aws-sign2@0.6.0, forever-agent@0.6.1, oauth-sign@0.8.2, is-typedarray@1.0.0, caseless@0.11.0, stringstream@0.0.6, aws4@1.11.0, isstream@0.1.2, json-stringify-safe@5.0.1, tough-cookie@2.2.2, node-uuid@1.4.8, qs@6.1.2, hawk@3.1.3, combined-stream@1.0.8, mime-types@2.1.34, http-signature@1.1.1, form-data@1.0.1, bl@1.1.2, har-validator@2.0.6) ├── read-installed@4.0.3 (debuglog@1.0.1, util-extend@1.0.3, slide@1.1.6, readdir-scoped-modules@1.1.0, read-package-json@2.1.2) ├── cpr@1.1.1 (rimraf@2.4.5) ├── tiny-lr@0.2.1 (parseurl@1.3.3, livereload-js@2.4.0, qs@5.1.0, debug@2.2.0, faye-websocket@0.10.0, body-parser@1.14.2) ├── cheerio@0.20.0 (entities@1.1.2, lodash@4.17.21, css-select@1.2.0, htmlparser2@3.8.3, jsdom@7.2.2) ├── juice@2.0.0 (deep-extend@0.4.2, slick@1.12.2, batch@0.5.3, cssom@0.3.1, cross-spawn-async@2.2.5, commander@2.9.0, web-resource-inliner@2.0.0) ├── chokidar@1.5.0 (async-each@1.0.3, path-is-absolute@1.0.1, inherits@2.0.4, glob-parent@2.0.0, is-glob@2.0.1, is-binary-path@1.0.1, anymatch@1.3.2, readdirp@2.2.1) └── nunjucks@2.5.2 (asap@2.0.6, yargs@3.32.0, chokidar@1.7.0) GitBook version: 3.2.3 4. 创建gitbook书籍 $ mkdir gitbook-demo $ cd gitbook-demo #使用 gitbook init 初始化书籍目录 $ gitbook init warn: no summary file in this book info: create README.md info: create SUMMARY.md info: initialization is finished $ ls README.md SUMMARY.md #使用 gitbook build 编译书籍 $ gitbook build info: 7 plugins are installed info: 6 explicitly listed info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 1 pages info: found 0 asset files info: >> generation finished with success in 0.4s ! $ ls _book README.md SUMMARY.md $ ls _book/ gitbook index.html search_index.json $ ls _book/gitbook/ fonts gitbook.js gitbook-plugin-fontsettings gitbook-plugin-highlight gitbook-plugin-lunr gitbook-plugin-search gitbook-plugin-sharing images style.css theme.js #使用 gitbook serve 编译并预览书籍 $ gitbook serve Live reload server started on port: 35729 Press CTRL+C to quit ... info: 7 plugins are installed info: loading plugin \"livereload\"... OK info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 1 pages info: found 0 asset files info: >> generation finished with success in 0.5s ! Starting server ... Serving book on http://localhost:4000 效果 图中侧栏Introduction的内容正是README.md的内容，SUMMARY.md 是编写界面侧栏的目录结构。 $ cat README.md # Introduction $ cat SUMMARY.md # Summary * [Introduction](README.md) 5. SUMMARY.md GitBook 使用文件 SUMMARY.md 来定义书本的章节和子章节的结构。文件 SUMMARY.md 被用来生成书本内容的预览表。 SUMMARY.md 的格式是一个简单的链接列表，链接的名字是章节的名字，链接的指向是章节文件的路径。子章节被简单的定义为一个内嵌于父章节的列表。以 # 开头的行为注释被忽略。 GitBook使用一个SUMMARY.md文件来定义文档的菜单。 虽说在官方文档中，它是可选的，但是它相当重要，控制了左边菜单栏的显示内容。它通过 Markdown 中的列表语法来表示文件的父子关系。紧凑型的。 创建一个目录，并编写一个markdown格式的文档 $ mkdir git $ mv git_training.md git $ ls _book book.json book.json_bak git kubernetes node_modules README.md SUMMARY.md $ ls git/ 1_git_introduce.md 2_git_command.md 编写SUMMARY.md # Summary ## 前言 * [Introduction](README.md) ## git * [git 介绍](git/1_git_introduce.md) * [git 命令](git/2_git_training.md) 启动 $ gitbook serve 效果： 当 md 文件数量非常多时，我们可以利用 插件 summary 自动生成菜单 summary 文件的介绍。 6. README.md 书本的首页内容默认是从文件 README.md 中提取的。 README.md是 gitbook 最基础的文件之一，它一般用来描述这本书最基本的信息。 它呈现给读者这本书最初的样子，如果内容不够简洁明了，很可能就没有看下去的欲望了。 可以通过 gitbook init 自动创建该文件。 如果这个文件名没有出现在 SUMMARY.md (目录索引文件) 中，那么它会被添加为章节的第一个条目。 如何替代README.md 一些项目更愿意将 README.md 文件作为项目的介绍而不是书的介绍。 大部分代码托管平台将 README.md 自动显示到项目首页，如果你不喜欢这样。 从GitBook >2.0.0 起，就可以在 book.json 中定义某个文件作为README。 删除掉SUMMARY.md文档关于README.md的引用 编写information.md $ cat information.md --- 这是一本关于介绍git、github、gitlab、gitbook的书籍。 比起官方的理解，它更接近体验训练。 book.json添加structure参数 book.json { \"structure\" : { \"readme\" : \"information.md\" } } 启动 $ gitbook serve 效果：默认的首页 7. book.json 7.1 侧栏添加链接 $ ls _book book.json kubernetes README.md SUMMARY.md $ vim book.json { \"author\": \"zongxun \", \"description\": \"This is a sample book created by gitbook\", \"extension\": null, \"generator\": \"site\", \"links\": { \"sharing\": { \"all\": null, \"facebook\": null, \"google\": null, \"twitter\": null, \"weibo\": null }, \"sidebar\": { \"Blog\": \"https://blog.csdn.net/xixihahalelehehe?spm=1000.2115.3001.5343\" } }, \"output\": null, \"pdf\": { \"fontSize\": 12, \"footerTemplate\": null, \"headerTemplate\": null, \"margin\": { \"bottom\": 36, \"left\": 62, \"right\": 62, \"top\": 36 }, \"pageNumbers\": false, \"paperSize\": \"a4\" }, \"plugins\": [], \"title\": \"GitBook Handbook\", \"variables\": {} } $ gitbook serve Live reload server started on port: 35729 Press CTRL+C to quit ... info: 7 plugins are installed info: loading plugin \"livereload\"... OK info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"sharing\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 1 pages info: found 0 asset files info: >> generation finished with success in 0.5s ! Starting server ... Serving book on http://localhost:4000 效果，只看到了一个Blog链接。 7.2 添加一个插件 编写book.json添加新theme-comscore主题插件 $ cat book.json { \"author\": \"zongxun \", \"description\": \"This is a sample book created by gitbook\", \"extension\": null, \"generator\": \"site\", \"links\": { \"sharing\": { \"all\": null, \"facebook\": null, \"google\": null, \"twitter\": null, \"weibo\": null }, \"sidebar\": { \"Blog\": \"https://blog.csdn.net/xixihahalelehehe?spm=1000.2115.3001.5343\" } }, \"output\": null, \"pdf\": { \"fontSize\": 12, \"footerTemplate\": null, \"headerTemplate\": null, \"margin\": { \"bottom\": 36, \"left\": 62, \"right\": 62, \"top\": 36 }, \"pageNumbers\": false, \"paperSize\": \"a4\" }, \"plugins\": [ \"theme-comscore\" ], \"title\": \"GitBook Handbook\", \"variables\": {} } 安装插件 gitbook install info: installing 1 plugins using npm@3.9.2 info: info: installing plugin \"theme-comscore\" info: install plugin \"theme-comscore\" (*) from NPM with version 0.0.3 /root/github/gitbook-demo └── gitbook-plugin-theme-comscore@0.0.3 info: >> plugin \"theme-comscore\" installed with success 执行 $ gitbook serve 添加主题插件前： 添加主题插件后： Copyright © ghostwritten 2019 all right reserved，powered by Gitbook该文件修订时间： 2022-05-31 12:43:38 "}}